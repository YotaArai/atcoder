#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long N, long long M, std::vector<std::string> A)
{
	vector<pair<int, int>> results;

	for (int i = 0; i < 2 * N; i++)
	{
		results.push_back({0, i});
	}

	for (int i = 0; i < M; i++)
	{
		for (int j = 0; j < N; j++)
		{
			int first_person = results[2 * j].second;
			int second_person = results[2 * j + 1].second;
			char first_hand = A[first_person][i];
			char second_hand = A[second_person][i];
			// cout << first_hand << " vs " << second_hand << endl;
			if (first_hand == second_hand)
			{
				// 引き分け
			}
			else if (first_hand == 'G')
			{
				if (second_hand == 'C')
				{
					// first_hand win
					results[2 * j].first--;
				}
				else
				{
					// second_hand win
					results[2 * j + 1].first--;
				}
			}
			else if (first_hand == 'C')
			{
				if (second_hand == 'P')
				{
					// first_hand win
					results[2 * j].first--;
				}
				else
				{
					// second_hand win
					results[2 * j + 1].first--;
				}
			}
			else if (first_hand == 'P')
			{
				if (second_hand == 'G')
				{
					// first_hand win
					results[2 * j].first--;
				}
				else
				{
					// second_hand win
					results[2 * j + 1].first--;
				}
			}
		}

		sort(results.begin(), results.end());
	}

	for (int i = 0; i < 2 * N; i++)
	{
		cout << results[i].second + 1 << endl;
	}
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N, M;
	std::scanf("%lld %lld", &N, &M);
	std::vector<std::string> A(2 * N);
	for (int i = 0; i < 2 * N; i++)
	{
		std::cin >> A[i];
	}
	// cout << N << " " << M << endl;
	// for (int i = 0; i < 2 * N; i++)
	// {
	// 	cout << A[i] << endl;
	// }

	solve(N, M, std::move(A));

	return 0;
}
