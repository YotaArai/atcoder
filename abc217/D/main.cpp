#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long L, long long Q, std::vector<long long> c, std::vector<long long> x)
{
	set<ll> cut;

	cut.insert(0);
	cut.insert(L);

	for (int i = 0; i < Q; i++)
	{
		if (c[i] == 1)
		{
			cut.insert(x[i]);
			// sort(cut.begin(), cut.end());
		}
		else
		{
			// if (cut.empty())
			// {
			// 	cout << L << endl;
			// }
			// else
			// {
			// ll idx = lower_bound(cut.begin(), cut.end(), x[i]) - cut.begin();
			// cout << "lower_bound " << idx << endl;

			// ll next = L;
			// if (idx != cut.size())
			// {
			// 	next = cut[idx];
			// }

			// ll prev = 0;
			// if (idx != 0)
			// {
			// 	prev = cut[idx - 1];
			// }

			// cout << next - prev << endl;

			// }
			auto it = cut.lower_bound(x[i]);
			cout << *it - *prev(it) << endl;
		}
	}
}

// Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long L;
	std::scanf("%lld", &L);
	long long Q;
	std::scanf("%lld", &Q);
	std::vector<long long> c(Q);
	std::vector<long long> x(Q);
	for (int i = 0; i < Q; i++)
	{
		std::scanf("%lld", &c[i]);
		std::scanf("%lld", &x[i]);
	}
	solve(L, Q, std::move(c), std::move(x));
	return 0;
}
