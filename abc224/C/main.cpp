#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long N, std::vector<long long> X, std::vector<long long> Y)
{
	ll ans = 0;

	for (int i = 0; i < N - 2; i++)
	{
		for (int j = i + 1; j < N - 1; j++)
		{
			for (int k = j + 1; k < N; k++)
			{
				// cout << "(" << i << ", " << j << ", " << k << ")   ";
				ll x_sigma1 = X[i] - X[j];
				ll x_sigma2 = X[i] - X[k];
				ll y_sigma1 = Y[i] - Y[j];
				ll y_sigma2 = Y[i] - Y[k];
				// cout << x_sigma1 << " " << x_sigma2 << " " << y_sigma1 << " " << y_sigma2 << " ";
				if (x_sigma1 == 0 || x_sigma2 == 0)
				{
					if (x_sigma1 != x_sigma2)
					{
						ans++;
						// cout << "sigmazeroOK";
					}
					continue;
				}
				long double sigma1, sigma2;
				sigma1 = (long double)y_sigma1 / (long double)x_sigma1;
				sigma2 = (long double)y_sigma2 / (long double)x_sigma2;
				// cout << sigma1 << " " << sigma2 << endl;
				if (sigma1 != sigma2)
				{
					ans++;
					// cout << "sigmaOK";
				}
				// cout << endl;
			}
		}
	}

	cout << ans << endl;
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N;
	std::scanf("%lld", &N);
	std::vector<long long> X(N);
	std::vector<long long> Y(N);
	for (int i = 0; i < N; i++)
	{
		std::scanf("%lld", &X[i]);
		std::scanf("%lld", &Y[i]);
	}
	solve(N, std::move(X), std::move(Y));
	return 0;
}
