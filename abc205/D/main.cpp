#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long N, long long Q, std::vector<long long> A, std::vector<long long> K)
{
	vector<ll> C(N);
	for (int i = 0; i < N; ++i)
	{
		C[i] = A[i] - (i + 1);
	}

	for (int i = 0; i < Q; i++)
	{
		int idx = lower_bound(C.begin(), C.end(), K[i]) - C.begin();
		if (idx == N)
		{
			cout << A[N - 1] + (K[i] - C[N - 1]) << endl;
		}
		else
		{
			cout << A[idx] - 1 - (C[idx] - K[i]) << endl;
		}
	}
}

// Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N;
	std::scanf("%lld", &N);
	long long Q;
	std::scanf("%lld", &Q);
	std::vector<long long> A(N);
	for (int i = 0; i < N; i++)
	{
		std::scanf("%lld", &A[i]);
	}
	std::vector<long long> K(Q);
	for (int i = 0; i < Q; i++)
	{
		std::scanf("%lld", &K[i]);
	}
	solve(N, Q, std::move(A), std::move(K));
	return 0;
}
