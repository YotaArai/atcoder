#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long N, std::vector<long long> A, long long X)
{
	vector<ll> sum_arr(N);
	for (int i = 0; i < N; i++)
	{
		if (i == 0)
		{
			sum_arr[i] = A[i];
		}
		else
		{
			sum_arr[i] = A[i] + sum_arr[i - 1];
		}
	}

	ll ans = X / sum_arr[N - 1];
	auto it = upper_bound(sum_arr.begin(), sum_arr.end(), X - (sum_arr[N - 1] * ans));
	ll idx = it - sum_arr.begin();
	cout << ans * N + idx + 1 << endl;
}

// Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N;
	std::scanf("%lld", &N);
	std::vector<long long> A(N);
	for (int i = 0; i < N; i++)
	{
		std::scanf("%lld", &A[i]);
	}
	long long X;
	std::scanf("%lld", &X);
	solve(N, std::move(A), X);
	return 0;
}
