#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long N, std::vector<long long> t, std::vector<long long> l, std::vector<long long> r)
{
    ll cnt = 0;

    for (int i = 0; i < N - 1; i++)
    {
        for (int j = i + 1; j < N; j++)
        {
            if (t[i] == 1 && t[j] == 1)
            {
                if (r[i] >= l[j] && l[i] <= r[j])
                {
                    cnt++;
                }
            }
            else if ((t[i] == 1 || t[i] == 3) && (t[j] == 1 || t[j] == 2))
            {
                if (r[i] >= l[j] && l[i] < r[j])
                {
                    cnt++;
                }
            }
            else if ((t[i] == 1 || t[i] == 2) && (t[j] == 1 || t[j] == 3))
            {
                if (r[i] > l[j] && l[i] <= r[j])
                {
                    cnt++;
                }
            }
            else
            {
                if (r[i] > l[j] && l[i] < r[j])
                {
                    cnt++;
                }
            }
        }
    }
    cout << cnt << endl;
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    // Failed to predict input format

    long long N;
    std::scanf("%lld", &N);

    std::vector<long long> t(N);
    std::vector<long long> l(N);
    std::vector<long long> r(N);

    for (int i = 0; i < N; i++)
    {
        cin >> t[i] >> l[i] >> r[i];
    }

    solve(N, std::move(t), std::move(l), std::move(r));

    return 0;
}
