#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

void solve(long long N, std::vector<int> A, std::vector<int> B)
{
	vector<double> C, Csum;
	// double Csum = 0;
	ll Asum[N], Bsum[N];
	// double Csum[N];

	for (int i = 0; i < N; i++)
	{
		double tmpC = static_cast<double>(A[i]) / static_cast<double>(B[i]);
		// Csum += tmpC;
		Asum[i] = A[i];
		if (i > 0)
		{
			Asum[i] += Asum[i - 1];
		}
		Bsum[i] = B[i];
		if (i > 0)
		{
			Bsum[i] += Bsum[i - 1];
		}
		Csum.push_back(tmpC);
		if (i > 0)
		{
			Csum[i] += Csum[i - 1];
		}
		C.push_back(tmpC);
	}

	// for (int i = 0; i < N; i++)
	// {
	// 	cout << A[i] << " " << B[i] << " " << C[i] << " " << Asum[i] << " " << Bsum[i] << " " << Csum[i] << endl;
	// }

	double ansTime = Csum[N - 1] / 2;
	// cout << ansTime << endl;

	int idx = lower_bound(Csum.begin(), Csum.end(), ansTime) - Csum.begin();
	// cout << idx << endl;

	if (idx == 0)
	{
		cout << setprecision(15) << ansTime * B[0] << endl;
	}
	else
	{
		cout << setprecision(15) << Asum[idx - 1] + (ansTime - Csum[idx - 1]) * B[idx] << endl;
	}
}

// Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N;
	std::scanf("%lld", &N);
	std::vector<int> A(N);
	std::vector<int> B(N);
	for (int i = 0; i < N; i++)
	{
		std::scanf("%d", &A[i]);
		std::scanf("%d", &B[i]);
	}
	solve(N, std::move(A), std::move(B));
	return 0;
}
