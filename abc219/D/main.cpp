#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <climits>
using namespace std;
typedef long long ll;

ll dp[301][301][301];

void solve(long long N, long long X, long long Y, std::vector<long long> A, std::vector<long long> B)
{

	for (int i = 0; i < 301; i++)
	{
		for (int j = 0; j < 301; j++)
		{
			for (int k = 0; k < 301; k++)
			{
				dp[i][j][k] = INT_MAX;
			}
		}
	}

	dp[0][0][0] = 0;

	for (int i = 1; i <= N; i++)
	{
		for (int j = 0; j <= X; j++)
		{
			for (int k = 0; k <= Y; k++)
			{

				if (A[i - 1] >= j && B[i - 1] >= k)
				{
					dp[i][j][k] = 1;
				}

				else if (A[i - 1] < j && B[i - 1] >= k)
				{
					dp[i][j][k] = min(dp[i - 1][j][k], 1 + dp[i - 1][j - A[i - 1]][k]);
				}

				else if (A[i - 1] >= j && B[i - 1] < k)
				{
					dp[i][j][k] = min(dp[i - 1][j][k], 1 + dp[i - 1][j][k - B[i - 1]]);
				}

				else if (A[i - 1] < j && B[i - 1] < k)
				{
					dp[i][j][k] = min(dp[i - 1][j][k], 1 + dp[i - 1][j - A[i - 1]][k - B[i - 1]]);
				}
			}
		}
	}

	ll ans = dp[N][X][Y];
	if (ans == INT_MAX)
	{
		ans = -1;
	}
	cout << ans << endl;
}

// Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N;
	std::scanf("%lld", &N);
	long long X;
	std::scanf("%lld", &X);
	long long Y;
	std::scanf("%lld", &Y);
	std::vector<long long> A(N);
	std::vector<long long> B(N);
	ll Asum = 0, Bsum = 0;
	for (int i = 0; i < N; i++)
	{
		std::scanf("%lld", &A[i]);
		std::scanf("%lld", &B[i]);
		Asum += A[i];
		Bsum += B[i];
	}
	if (Asum < X || Bsum < Y)
	{
		cout << -1 << endl;
		return 0;
	}
	solve(N, X, Y, std::move(A), std::move(B));
	return 0;
}
