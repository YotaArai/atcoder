// BFS https://qiita.com/drken/items/996d80bcae64649a6580
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

const string TOWN = "Town";
const string ROAD = "Road";

void solve(long long N, long long Q, std::vector<long long> a, std::vector<long long> b, std::vector<long long> c, std::vector<long long> d)
{
    // for (int i = 0; i < N - 1; i++)
    // {
    //     cout << a[i] << "," << b[i] << endl;
    // }
    // cout << endl;
    // for (int i = 0; i < Q; i++)
    // {
    //     cout << c[i] << "," << d[i] << endl;
    // }

    vector<vector<int>> G(N);
    for (int i = 0; i < N - 1; i++)
    {
        G[a[i] - 1].push_back(b[i] - 1);
        G[b[i] - 1].push_back(a[i] - 1);
    }

    vector<int> dist(N, -1);
    queue<int> que;

    dist[0] = 0;
    que.push(0);

    while (!que.empty())
    {
        int v = que.front();
        que.pop();

        for (int nv : G[v])
        {
            if (dist[nv] != -1)
                continue;

            dist[nv] = dist[v] + 1;
            que.push(nv);
        }
    }

    // for (int v = 0; v < N; ++v)
    // {
    //     cout << v + 1 << ": " << dist[v] << endl;
    // }

    for (int i = 0; i < Q; i++)
    {
        // if ((dist[c[i] - 1] + dist[d[i] - 1]) % 2 == 0)
        if (dist[c[i] - 1] % 2 == dist[d[i] - 1] % 2)
        {
            cout << "Town" << endl;
        }
        else
        {
            cout << "Road" << endl;
        }
    }
}

// Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    // Failed to predict input format

    long long N, Q;
    std::scanf("%lld", &N);
    std::scanf("%lld", &Q);

    std::vector<long long> a(N);
    std::vector<long long> b(N);
    std::vector<long long> c(Q);
    std::vector<long long> d(Q);

    for (int i = 0; i < N - 1; i++)
    {
        cin >> a[i] >> b[i];
    }

    for (int i = 0; i < Q; i++)
    {
        cin >> c[i] >> d[i];
    }

    solve(N, Q, std::move(a), std::move(b), std::move(c), std::move(d));

    return 0;
}
