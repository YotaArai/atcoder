#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <regex>
using namespace std;
typedef long long ll;

long long base8_to_long(string N)
{
	long long res = 0;
	for (int i = 0; i < N.size(); ++i)
	{
		res = res * 8 + int(N[i] - '0');
	}
	return res;
}

string long_to_base9(long long N)
{
	if (N == 0)
	{
		return "0";
	}
	string res;
	while (N > 0)
	{
		res = char(N % 9 + '0') + res;
		N /= 9;
	}
	return res;
}

void solve(string N, long long K)
{
	for (int j = 0; j < K; j++)
	{

		string nineN = "";
		ll decimalN;
		std::istringstream(N) >> std::oct >> decimalN;

		// decimalN = base8_to_long(N);

		// cout << "10進数: " << decimalN << endl;

		// for (int i = 20; i >= 1; i--)
		// {
		// 	int division;
		// 	division = decimalN / pow(9, i);
		// 	decimalN -= division * pow(9, i);
		// 	// cout << division << ", " << decimalN << endl;

		// 	nineN += std::to_string(division);
		// }
		// nineN += std::to_string(decimalN);

		nineN = long_to_base9(decimalN);

		// cout << "9進数: " << nineN << endl;

		N = regex_replace(nineN, regex("8"), "5");

		// for (int k = 0; k < nineN.size(); ++k)
		// {
		// 	if (nineN[k] == '8')
		// 	{
		// 		nineN[k] = '5';
		// 	}
		// }
		// N = nineN;
		// cout << "答え: " << strN << endl;
		// cout << "-------" << endl;
	}

	cout << N << endl;
}

// Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	string N;
	std::cin >> N;
	long long K;
	std::scanf("%lld", &K);
	solve(N, K);
	return 0;
}
