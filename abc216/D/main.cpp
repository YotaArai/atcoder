#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;

const string YES = "Yes";
const string NO = "No";

// Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{

	long long N;
	std::scanf("%lld", &N);
	long long M;
	std::scanf("%lld", &M);

	vector<long long> k(M);
	vector<queue<ll>> a(M);

	queue<int> que;
	vector<vector<int>> mem(N);

	for (ll i = 0; i < M; i++)
	{
		std::scanf("%lld", &k[i]);

		queue<ll> stacktmp;
		for (ll j = 0; j < k[i]; j++)
		{
			ll atmp;
			std::scanf("%lld", &atmp);
			stacktmp.push(atmp - 1);
		}
		a[i] = stacktmp;

		mem[a[i].front()].push_back(i);
	}

	for (ll i = 0; i < N; i++)
	{
		if (mem[i].size() == 2)
		{
			que.push(i);
		}
	}

	while (!que.empty())
	{
		int now = que.front();
		que.pop();
		for (auto p : mem[now])
		{
			a[p].pop();
			if (!a[p].empty())
			{
				mem[a[p].front()].push_back(p);
				if (mem[a[p].front()].size() == 2)
				{
					que.push(a[p].front());
				}
			}
		}
	}
	for (auto p : a)
	{
		if (!p.empty())
		{
			cout << "No" << endl;
			return 0;
		}
	}
	cout << "Yes" << endl;

	return 0;
}
