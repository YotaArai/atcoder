#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <climits>
using namespace std;
typedef long long ll;

void solve(long long N, std::vector<long long> S, std::vector<long long> T)
{
	ll ans[N];

	std::vector<ll>::iterator iter = std::min_element(T.begin(), T.end());
	size_t minidxT = std::distance(T.begin(), iter);

	// cout << T[minidxT] << ", " << minidxT << endl;

	ans[minidxT] = T[minidxT];
	for (int i = 1; i < N; i++)
	{
		int a = (minidxT + i) % N;
		int b = a - 1;
		if (a == 0)
		{
			b = N - 1;
		}
		// cout << a << ", " << b << endl;
		ans[a] = (min(ans[b] + S[b], T[a]));
	}

	for (int i = 0; i < N; i++)
	{
		cout << ans[i] << endl;
	}
}

// Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
	long long N;
	std::scanf("%lld", &N);
	std::vector<long long> S(N);
	for (int i = 0; i < N; i++)
	{
		std::scanf("%lld", &S[i]);
	}
	std::vector<long long> T(N);
	for (int i = 0; i < N; i++)
	{
		std::scanf("%lld", &T[i]);
	}
	solve(N, std::move(S), std::move(T));
	return 0;
}
